// 연속합 성공분류 Silver II
// 다이나믹 프로그래밍
// 난이도 제공: solved.ac — 난이도 투표하러 가기
// 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
// 1 초 (추가 시간 없음)	128 MB	68944	19865	13674	28.323%
// 문제
// n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.

// 예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.

// 입력
// 첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.

// 출력
// 첫째 줄에 답을 출력한다.

// 예제 입력 1 
// 10
// 10 -4 3 1 5 6 -35 12 21 -1
// 예제 출력 1 
// 33
// 예제 입력 2 
// 10
// 2 1 -4 3 4 -4 6 5 -5 1
// 예제 출력 2 
// 14

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main(){
    
    int n;
    cin>>n;
    
    vector<int> d(n);

    for(int i=0; i<n; i++){
        cin>>d[i];
    }
    
    vector<int> a(n);
    a[0] = d[0];
    
    for(int i=1; i<n; i++){
        a[i] = a[i-1]+d[i];
        if( a[i] < d[i] ){
            a[i] = d[i];
        }
    }
    
    cout<<*max_element(a.begin(), a.end())<<'\n';
    
    return 0;
}

//            0   1  2  3
//    d[n] : 10, -4, 3, 1, 5, 6, -35, 12, 21, -1
//    a[n] : 10   6  9  10 15 21 -14  -2  33  32
//                                    12
//   a[i]는 d[n]을 계속 더한 값.
//   a[i]가 d[i]보다 작아지는 순간 a[i]를 다시시작.
