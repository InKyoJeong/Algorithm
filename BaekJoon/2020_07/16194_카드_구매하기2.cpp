//카드 구매하기 2 성공 Silver I
//다이나믹 프로그래밍
//난이도 제공: solved.ac — 난이도 투표하러 가기
//시간 제한    메모리 제한    제출    정답    맞은 사람    정답 비율
//1 초    256 MB    2314    1763    1434    76.767%
//문제
//요즘 민규네 동네에서는 스타트링크에서 만든 PS카드를 모으는 것이 유행이다.
//
//PS카드는 PS(Problem Solving)분야에서 유명한 사람들의 아이디와 얼굴이 적혀있는 카드이다. 각각의 카드에는 등급을 나타내는 색이 칠해져 있고, 다음과 같이 8가지가 있다.
//
//전설카드
//레드카드
//오렌지카드
//퍼플카드
//블루카드
//청록카드
//그린카드
//그레이카드
//카드는 카드팩의 형태로만 구매할 수 있고, 카드팩의 종류는 카드 1개가 포함된 카드팩, 카드 2개가 포함된 카드팩, ... 카드 N개가 포함된 카드팩과 같이 총 N가지가 존재한다.
//
//민규는 지난주에 너무 많은 돈을 써 버렸다. 그래서 오늘은 돈을 최소로 지불해서 카드 N개를 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.
//
//예를 들어, 카드팩이 총 4가지 종류가 있고, P1 = 1, P2 = 5, P3 = 6, P4 = 7인 경우에 민규가 카드 4개를 갖기 위해 지불해야 하는 금액의 최솟값은 4원이다. 1개 들어있는 카드팩을 4번 사면 된다.
//
//P1 = 5, P2 = 2, P3 = 8, P4 = 10인 경우에는 카드가 2개 들어있는 카드팩을 2번 사면 4원이고, 이 경우가 민규가 지불해야 하는 금액의 최솟값이다.
//
//카드 팩의 가격이 주어졌을 때, N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최솟값을 구하는 프로그램을 작성하시오. N개보다 많은 개수의 카드를 산 다음, 나머지 카드를 버려서 N개를 만드는 것은 불가능하다. 즉, 구매한 카드팩에 포함되어 있는 카드 개수의 합은 N과 같아야 한다.
//
//입력
//첫째 줄에 민규가 구매하려고 하는 카드의 개수 N이 주어진다. (1 ≤ N ≤ 1,000)
//
//둘째 줄에는 Pi가 P1부터 PN까지 순서대로 주어진다. (1 ≤ Pi ≤ 10,000)
//
//출력
//첫째 줄에 민규가 카드 N개를 갖기 위해 지불해야 하는 금액의 최솟값을 출력한다.
//
//예제 입력 1
//4
//1 5 6 7
//예제 출력 1
//4
//예제 입력 2
//5
//10 9 8 7 6
//예제 출력 2
//6

#include <iostream>
using namespace std;

int d[1001];
int p[10001];

int main(){
    int n;
    cin>>n;
    
    for(int i=1; i<=n; i++){
        cin>>p[i];
    }

    d[0] = 0;
    for(int i=1; i<=n; i++){
        d[i]=1000*10000;         //처음에 그냥 큰값이라치고 99로했는데 그럼 가격이 100이상일땐 생각을 못했다.
    }
    
    for(int i=1; i<=n; i++){
        for(int j=1; j<=i; j++){
            d[i] = min(d[i], d[i-j] + p[j]);
        }
    }
    cout<<d[n]<<'\n';

    return 0;
}

// 문제점; 최대는 둘중 max하면 상관없었는데 최소는 초기값 0이 계속 저장되므로 그냥 min만 바꾸면 틀림.
    // 2장산다고하면
    // i=1 일때 j=1
    // d[1] = d[1], d[0]+p[1] 중에 최소를 d[1]로 저장. >>>>> 하면 d[1]의 0이 계속 저장됨.
    // i =2일때 j=1
    // d[2] = d[2], d[1]+p[1] 중에 최소를 d[2]로 저장 >>>d[2]는 0이므로 0이계쏙 저장
    // i=2 j=2
    // d[2] = d[2], d[0]+p[2] 중에 최소를 d[2]에 저장




// -1초기화
#include <iostream>
#include <vector>

using namespace std;

int main()
{
    int n;
    cin>>n;
    vector<int> p(n+1);
    for(int i=1; i<=n; i++){
        cin>>p[i];
    }
    vector<int> d(n+1, -1);
    d[0] = 0;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=i; j++){
            if(d[i]==-1|| d[i] > d[i-j]+p[j])
                d[i] = d[i-j] + p[j];
        }
    }

    cout<<d[n]<<'\n';

    return 0;
}


// -1은 아직 답을 구하지 않았다는 의미.